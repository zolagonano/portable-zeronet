#!/bin/bash
#
# MIT License
#
# Copyright (c) 2024 Zola Gonano
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

function is_luks_encrypted {
    sudo cryptsetup isLuks "$1"
}

function mount_device {
    local device_path=$1

    if [ ! -e "$device_path" ]; then
        echo -e "\033[91mError:\033[0m Device not found: $device_path"
        exit 1
    fi

    if [ ! -d "$device_path" ]; then
        if is_luks_encrypted "$device_path"; then
            read -s -p "Enter LUKS passphrase for $device_path: " luks_passphrase
            echo "$luks_passphrase" | sudo cryptsetup luksOpen "$device_path" my_encrypted_device
            sudo mount /dev/mapper/my_encrypted_device /mnt
        else
            udisksctl mount -b "$device_path"
        fi
    fi
}

function check_tor_running {
    [ "$(ps -aeo "%c" | grep -c "tor")" -eq 0 ] && echo -e "\033[93mWarning:\033[0m Tor is not running. ZeroNet may not work correctly."
}

function check_vpn_enabled {
    printf "Checking VPN connection: "
    [ "$(ls /dev/net/tun* 2>/dev/null | wc -l)" -eq 0 ] && echo -e "\033[93mWarning:\033[0m No TUN devices found. VPN may not be enabled." || echo -e "\033[92mPassed!\033[0m"
}

function run_zeronet {
    local zeronet_path=$1
    echo "----------SCRIPT LOGS-----------"
    cd "$zeronet_path" || exit
    printf "Moving from \033[93m$CURRENT_DIR\033[0m to \033[93m$PWD\033[0m\n\n"
    echo "----------ZERONET LOGS----------"
    sh ./ZeroNet.sh
}

# Main script

if [ $# -ne 2 ]; then
    echo -e "\033[91mError:\033[0m Please provide both device path and ZeroNet Bundle directory path."
    exit 1
fi

DEVICE_PATH=$1
ZERONET_PATH=$2
CURRENT_DIR=$PWD

mount_device "$DEVICE_PATH"
check_tor_running
check_vpn_enabled
run_zeronet "$ZERONET_PATH"

